#!/usr/bin/env python3

import argparse
import subprocess
import datetime
import os
import logging

# Setup logging
# LOG_FILE = '/var/log/devopsfetch.log'
LOG_FILE = './devopsfetch.log'
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def list_ports(port_number):
    if port_number:
        print(port_number)
        return
        result = subprocess.run(['ss', '-tuln', f'| grep {port_number}'], shell=True, capture_output=True, text=True)
        print(result.stdout)
        logging.info(f"Information for port {port_number} displayed.")
    else:
        result = subprocess.run(['ss', '-tuln'], capture_output=True, text=True)
        print(result.stdout)
        logging.info("Active ports listed.")


def list_docker_images(container_name):
    if container_name:
        result = subprocess.run(['docker', 'inspect', container_name], capture_output=True, text=True)
        print(result.stdout)
        logging.info(f"Information for container {container_name} displayed.")
    else:
        result = subprocess.run(['docker', 'images'], capture_output=True, text=True)
        print(result.stdout)
        logging.info("Docker images listed.")


def list_nginx(domain):
    if domain:
        # Assuming Nginx configuration is in /etc/nginx/sites-enabled
        nginx_conf_dir = '/etc/nginx/sites-enabled'
        for conf_file in os.listdir(nginx_conf_dir):
            if domain in conf_file:
                with open(os.path.join(nginx_conf_dir, conf_file)) as f:
                    print(f.read())
                break
        logging.info(f"Configuration for domain {domain} displayed.")
    else:
        # Assuming Nginx configuration is in /etc/nginx/sites-enabled
        nginx_conf_dir = '/etc/nginx/sites-enabled'
        for conf_file in os.listdir(nginx_conf_dir):
            with open(os.path.join(nginx_conf_dir, conf_file)) as f:
                print(f.read())
        logging.info("Nginx domains and ports listed.")

def list_users(username):
    if username:
        result = subprocess.run(['last', username], capture_output=True, text=True)
        print(result.stdout)
        logging.info(f"Information for user {username} displayed.")
    else:
        result = subprocess.run(['who'], capture_output=True, text=True)
        print(result.stdout)
        logging.info("User logins listed.")


def time_range(start_time, end_time):
    # This is a placeholder. Actual implementation would require log parsing and filtering
    print(f"Showing activities from {start_time} to {end_time}.")
    logging.info(f"Activities from {start_time} to {end_time} displayed.")

def main():
    parser = argparse.ArgumentParser(description='DevOps Fetch Tool', usage='%(prog)s [options]')
    parser.add_argument('-p', '--port', type=str, help='Display active ports or details for a specific port')
    parser.add_argument('-d', '--docker', type=str, help='List Docker images or details for a specific container')
    parser.add_argument('-n', '--nginx', type=str, help='Display Nginx domains or details for a specific domain')
    parser.add_argument('-u', '--users', type=str, help='List users or details for a specific user')
    parser.add_argument('-t', '--time', type=str, nargs="+", help='Display activities within a specified time range')
    
    args = parser.parse_args()

    if args.port:
        list_ports(args.port)
    elif args.docker:
        list_docker_images(args.docker)
    elif args.nginx:
        list_nginx(args.nginx)
    elif args.users:
        print(args.users)
        list_users(args.users)
    elif args.time:
        if len(args.time) == 2:
            start_time = args.time[0]
            end_time = args.time[1]
            time_range(start_time, end_time)
        elif len(args.time) == 1:
            start_time = args.time[0]
            end_time = datetime.datetime.now().strftime('%Y-%m-%d')
            time_range(start_time, end_time)
        else:
            parser.print_help()

    else:
        parser.print_help()

if __name__ == "__main__":
    main()
